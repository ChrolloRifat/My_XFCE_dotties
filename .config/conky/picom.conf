#################################
#             Shadows           #
#################################

shadow = true;
shadow-radius = 15;
shadow-opacity = .75;
shadow-offset-x = -15;
shadow-offset-y = -15;
shadow-color = "#000000";

shadow-exclude = [
    "class_g ?= 'Notify-osd'",
    "class_g = 'Cairo-clock'",
    "class_g = 'slop'",
    "class_g = 'Polybar'",
    "_GTK_FRAME_EXTENTS@:c",
];



#################################
#           Fading              #
#################################

fading = true;

# Opacity change between steps while fading in / out (0.01 - 1.0, defaults to 0.028)
fade-in-step = 0.1;
fade-out-step = 0.1;

# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
# fade-delta = 10

fade-exclude = [
    "class_g = 'slop'"   # maim
]



#################################
#   Transparency / Opacity      #
#################################

inactive-opacity = 1.0;
frame-opacity = 1.0;
inactive-opacity-override = false;
active-opacity = 1.0;
# inactive-dim = 0.1;

focus-exclude = [
    "class_g = 'Cairo-clock'",
    "class_g = 'Bar'",                    # lemonbar
    "class_g = 'slop'"                    # maim
];



#################################
#       General Settings        #
#################################

experimental-backends = true;
backend = "glx";
#backend = "xrender";

vsync = true;
mark-wmwin-focused = true;
mark-ovredir-focused = true;
detect-rounded-corners = true;
detect-client-opacity = true;

# Specify refresh rate of the screen. If not specified or 0, picom will try detecting this with X RandR extension.
refresh-rate = 0;

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows in the same group focused at the same time.
detect-transient = true;

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same group focused at the same time. 'WM_TRANSIENT_FOR' has higher priority if detect-transient is enabled, too.
detect-client-leader = true;

# Disable the use of damage information.
# This cause the whole screen to be redrawn everytime, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
#
# no-use-damage = false
use-damage = true;

# Set the log level. Possible values are: "trace", "debug", "info", "warn", "error" in increasing level of importance. Case doesn't matter.
# If using the "TRACE" log level, it's better to log into a file using *--log-file*, since it can generate a huge stream of logs.
# log-level = "debug"
log-level = "info";


wintypes:
{
    tooltip = { focus = true; full-shadow = false; };
    normal = { shadow = true; }
    dock = { shadow = true; }
    notification = { shadow = true; }
};
